# üìà AI PH√ÇN T√çCH K·ª∏ THU·∫¨T C·ªî PHI·∫æU VI·ªÜT NAM (c√≥ c·∫≠p nh·∫≠t gi√° m·ªõi nh·∫•t)

import streamlit as st
import pandas as pd
import pandas_ta as ta
import openai
import requests
from datetime import datetime
import matplotlib.pyplot as plt

# --- C·∫•u h√¨nh API KEY ---
openai.api_key = st.secrets["OPENAI_API_KEY"]

# --- Giao di·ªán nh·∫≠p ---
st.set_page_config(page_title="Ph√¢n t√≠ch c·ªï phi·∫øu b·∫±ng AI", layout="wide")
st.title("üìä Ph√¢n t√≠ch k·ªπ thu·∫≠t & AI nh·∫≠n ƒë·ªãnh c·ªï phi·∫øu")
symbol = st.text_input("Nh·∫≠p m√£ c·ªï phi·∫øu (v√≠ d·ª•: HPG, VNM, FPT):", "HPG").upper()

# --- L·∫•y d·ªØ li·ªáu gi√° t·ª´ VNDIRECT ---
url = f"https://finfo-api.vndirect.com.vn/v4/stock_prices?symbol={symbol}&sort=date&size=300"
res = requests.get(url)

if res.status_code == 200 and res.json()["data"]:
    df = pd.DataFrame(res.json()["data"])
    df = df.sort_values("date")
    df["date"] = pd.to_datetime(df["date"])
    df.set_index("date", inplace=True)
    df[["open", "close", "high", "low", "volume"]] = df[["open", "close", "high", "low", "volume"]].astype(float)

    # --- T√≠nh ch·ªâ b√°o k·ªπ thu·∫≠t ---
    df["EMA20"] = ta.ema(df["close"], length=20)
    df["EMA50"] = ta.ema(df["close"], length=50)
    df["EMA200"] = ta.ema(df["close"], length=200)
    df["RSI"] = ta.rsi(df["close"], length=14)

    # --- X√°c ƒë·ªãnh t√≠n hi·ªáu giao c·∫Øt ---
    df["Signal"] = 0
    df.loc[(df["EMA20"] > df["EMA50"]) & (df["EMA20"].shift(1) <= df["EMA50"].shift(1)), "Signal"] = 1
    df.loc[(df["EMA20"] < df["EMA50"]) & (df["EMA20"].shift(1) >= df["EMA50"].shift(1)), "Signal"] = -1

    # --- D·ªØ li·ªáu m·ªõi nh·∫•t ---
    latest = df.iloc[-1]
    st.subheader(f"üìå D·ªØ li·ªáu m·ªõi nh·∫•t ({latest.name.date()}):")
    st.metric("Gi√° hi·ªán t·∫°i (close)", f"{latest['close']:.0f} VND")
    st.write(f"EMA20: {latest['EMA20']:.0f} | EMA50: {latest['EMA50']:.0f} | EMA200: {latest['EMA200']:.0f}")
    st.write(f"RSI(14): {latest['RSI']:.2f}")

    # --- Nh·∫≠n ƒë·ªãnh t·ª´ GPT ---
    prompt = f"""
    B·∫°n l√† chuy√™n gia ph√¢n t√≠ch k·ªπ thu·∫≠t.
    H√£y nh·∫≠n ƒë·ªãnh c·ªï phi·∫øu {symbol} v·ªõi c√°c th√¥ng s·ªë:
    - Gi√° hi·ªán t·∫°i: {latest['close']:.2f} VND
    - RSI(14): {latest['RSI']:.2f}
    - EMA20: {latest['EMA20']:.2f}
    - EMA50: {latest['EMA50']:.2f}
    - EMA200: {latest['EMA200']:.2f}
    - T√≠n hi·ªáu EMA: {"MUA" if latest['Signal']==1 else "B√ÅN" if latest['Signal']==-1 else "CH·ªú"}

    Vi·∫øt nh·∫≠n ƒë·ªãnh ng·∫Øn g·ªçn b·∫±ng ti·∫øng Vi·ªát v√† g·ª£i √Ω h√†nh ƒë·ªông.
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        st.subheader("üß† Nh·∫≠n ƒë·ªãnh t·ª´ AI")
        st.info(response["choices"][0]["message"]["content"])
    except Exception as e:
        st.warning(f"‚ö†Ô∏è L·ªói g·ªçi OpenAI: {e}")

    # --- Bi·ªÉu ƒë·ªì gi√° & EMA ---
    st.subheader("üìâ Bi·ªÉu ƒë·ªì gi√° & ƒë∆∞·ªùng trung b√¨nh ƒë·ªông")
    fig, ax = plt.subplots(figsize=(12,5))
    ax.plot(df.index, df["close"], label="Gi√° ƒë√≥ng c·ª≠a", color="gray")
    ax.plot(df.index, df["EMA20"], label="EMA20", color="red")
    ax.plot(df.index, df["EMA50"], label="EMA50", color="blue")
    ax.plot(df.index, df["EMA200"], label="EMA200", color="black")
    ax.legend()
    ax.set_title(f"{symbol} - Bi·ªÉu ƒë·ªì k·ªπ thu·∫≠t")
    st.pyplot(fig)

    # --- D·ªØ li·ªáu b·∫£ng g·∫ßn nh·∫•t ---
    st.subheader("üìÑ B·∫£ng d·ªØ li·ªáu 10 phi√™n g·∫ßn nh·∫•t")
    st.dataframe(df[["open", "high", "low", "close", "EMA20", "EMA50", "EMA200", "RSI"]].tail(10).round(2))

else:
    st.error("Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu cho m√£ c·ªï phi·∫øu n√†y.")
