# 📈 Công cụ Phân Tích Kỹ Thuật Chứng Khoán VN bằng Finnhub

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
import datetime

# ====================== CẤU HÌNH API ======================
st.set_page_config(page_title="Phân Tích Cổ Phiếu VN", layout="wide")
st.title("📊 Phân Tích Kỹ Thuật Chứng Khoán VN (Finnhub API)")

API_KEY = st.secrets["finnhub_api_key"] if "finnhub_api_key" in st.secrets else st.text_input("🔑 Nhập API Key Finnhub:")

# ====================== HÀM LẤY DỮ LIỆU ======================
def get_data_finnhub(symbol: str, days: int = 120):
    end = int(datetime.datetime.now().timestamp())
    start = int((datetime.datetime.now() - datetime.timedelta(days=days)).timestamp())
    url = f"https://finnhub.io/api/v1/stock/candle?symbol={symbol}&resolution=D&from={start}&to={end}&token={API_KEY}"
    res = requests.get(url, timeout=10)
    data = res.json()
    if data.get("s") != "ok":
        return None
    df = pd.DataFrame({
        "date": pd.to_datetime(np.array(data["t"], dtype='datetime64[s]')),
        "open": data["o"],
        "high": data["h"],
        "low": data["l"],
        "close": data["c"],
        "volume": data["v"]
    })
    df.set_index("date", inplace=True)
    return df

# ====================== CHỈ BÁO ======================
def calculate_indicators(df):
    df['EMA20'] = df['close'].ewm(span=20).mean()
    df['EMA50'] = df['close'].ewm(span=50).mean()
    delta = df['close'].diff()
    gain = delta.where(delta > 0, 0).rolling(14).mean()
    loss = -delta.where(delta < 0, 0).rolling(14).mean()
    rs = gain / loss
    df['RSI'] = 100 - (100 / (1 + rs))
    df['MACD'] = df['close'].ewm(12).mean() - df['close'].ewm(26).mean()
    df['Signal'] = df['MACD'].ewm(9).mean()
    return df

# ====================== TÍN HIỆU ======================
def generate_signals(df):
    df['Buy'] = np.where(
        (df['EMA20'] > df['EMA50']) &
        (df['EMA20'].shift(1) <= df['EMA50'].shift(1)) &
        (df['MACD'] > df['Signal']) &
        (df['RSI'] > 30) & (df['RSI'] < 70),
        df['close'],
        np.nan
    )
    df['Sell'] = np.where(
        (df['EMA20'] < df['EMA50']) &
        (df['EMA20'].shift(1) >= df['EMA50'].shift(1)),
        df['close'],
        np.nan
    )
    return df

# ====================== VẼ BIỂU ĐỒ ======================
def plot_chart(df, symbol):
    fig, ax = plt.subplots(figsize=(14, 6))
    ax.plot(df.index, df['close'], label='Close', color='black')
    ax.plot(df.index, df['EMA20'], label='EMA20', color='blue')
    ax.plot(df.index, df['EMA50'], label='EMA50', color='red')
    ax.scatter(df.index, df['Buy'], marker='^', color='green', label='Buy', s=100)
    ax.scatter(df.index, df['Sell'], marker='v', color='red', label='Sell', s=100)
    ax.set_title(f"Biểu đồ giá và tín hiệu: {symbol}")
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

# ====================== GIAO DIỆN STREAMLIT ======================
symbol = st.text_input("📥 Nhập mã cổ phiếu Finnhub (VD: VNM.VN, FPT.VN):", "FPT.VN").upper()

if API_KEY and symbol:
    with st.spinner("📡 Đang tải dữ liệu..."):
        df = get_data_finnhub(symbol)
    if df is not None:
        df = calculate_indicators(df)
        df = generate_signals(df)
        st.subheader("📈 Biểu đồ kỹ thuật")
        plot_chart(df, symbol)

        st.subheader("📊 Chỉ báo mới nhất:")
        st.write(df[['close', 'EMA20', 'EMA50', 'MACD', 'Signal', 'RSI']].tail(1).T)

        last = df.iloc[-1]
        if not np.isnan(last['Buy']):
            st.success(f"👉 Tín hiệu MUA tại giá {last['Buy']:.2f}")
        elif not np.isnan(last['Sell']):
            st.error(f"👈 Tín hiệu BÁN tại giá {last['Sell']:.2f}")
        else:
            st.info("⏳ Chưa có tín hiệu rõ ràng.")
    else:
        st.warning("⚠️ Không lấy được dữ liệu từ Finnhub. Kiểm tra lại mã cổ phiếu hoặc API Key.")
else:
    st.info("🔐 d1l0omhr01qt8foqo9fgd1l0omhr01qt8foqo9g0")
   
